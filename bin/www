#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('react-backend:server');
var http = require('http');
var bittrex = require('node.bittrex.api');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const io = require('socket.io')(server);

var lastTicker={};
var clients=0;
var tickerActive=false;
var intervalID;


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(80);
server.on('error', onError);
server.on('listening', onListening);



bittrex.options({
  'apikey' : 'API_KEY',
  'apisecret' : 'API_SECRET',
});

io.on('connection', (client) => {
  client.on('subscribeToTicker', (interval) => {
    clients++
    if (!tickerActive) startTicker()
    client.intervalID = setInterval( () => {
      client.emit('ticker', lastTicker)
    }, interval)
  })

  client.on('disconnect', (client) => {
    clients--;
    clearInterval(client.intervalID);
    if ( clients === 0 ) {
      stopTicker();
    }
  })
});

function stopTicker() {
  tickerActive=false;
  clearInterval(intervalID);
}
function startTicker () {
  tickerActive=true;
  intervalID = setInterval( () => {
    bittrex.getmarketsummaries( function( data, err ) {
      if (err) {
        return console.error(err);
      }
      console.log(data);
      lastTicker=data;
    });
  }, 5000)
}
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
